#include <iostream>
using namespace std;

bool isSafe(int board[10][10], int i, int j, int n) {
    // Check column
    for (int row = 0; row < i; row++) {
        if (board[row][j] == 1) {
            return false;
        }
    }

    // Check left diagonal
    int x = i, y = j;
    while (x >= 0 && y >= 0) {
        if (board[x][y] == 1) {
            return false;
        }
        x--;
        y--;
    }

    // Check right diagonal
    x = i;
    y = j;
    while (x >= 0 && y < n) {
        if (board[x][y] == 1) {
            return false;
        }
        x--;
        y++;
    }

    return true;
}

bool SolveNQueen(int board[10][10], int i, int n) {
    // Base case: if i == n, print the board and return true
    if (i == n) {
        // Print the board
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 1) {
                    cout << "Q ";
                } else {
                    cout << "- ";
                }
            }
            cout << endl;
        }
        cout << endl;
        return true; // Return true to print one solution
    }

    // Recursive case: try to place queen in current row
    for (int j = 0; j < n; j++) {
        // Check if the i,j position is safe
        if (isSafe(board, i, j, n)) {
            // Place the queen
            board[i][j] = 1;

            // Try to place the queen in the next row
            bool nextQueenRakhPaye = SolveNQueen(board, i + 1, n);
            if (nextQueenRakhPaye) {
                return true;
            }

            // If placing queen in i,j does not lead to a solution
            // then backtrack by removing the queen (i.e., undo the move)
            board[i][j] = 0;
        }
    }

    // If no position is safe in the current row, return false
    return false;
}

int main() {
    int n;
    cin >> n;
    int board[10][10] = {0}; // Initialize the board with 0s
    if (!SolveNQueen(board, 0, n)) {
        cout << "No solution exists!" << endl;
    }
    return 0;
}
