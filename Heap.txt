#include <iostream>
#include <stack>
#include <queue>
using namespace std;

class Node
{
public:
    int vertex;
    Node *next;
    Node(int v) : vertex(v), next(NULL) {}
};

class Graph
{
public:
    int no_of_vertices;
    Node *Alist[6]; // Adjust this size if the number of vertices changes

    Graph()
    {
        no_of_vertices = 6; // Modify if more vertices are needed
        for (int i = 0; i < no_of_vertices; ++i)
        {
            Alist[i] = NULL;
        }
    }

    void insert(int v1, int v2);
    void display();
    void DFS();
    void BFS();
};

void Graph::insert(int v1, int v2)
{
    // Insert edge from v1 to v2
    Node *newNode1 = new Node(v2);
    if (Alist[v1] == NULL)
    {
        Alist[v1] = newNode1;
    }
    else
    {
        Node *temp = Alist[v1];
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newNode1;
    }

    // Insert edge from v2 to v1 (making it undirected)
    Node *newNode2 = new Node(v1);
    if (Alist[v2] == NULL)
    {
        Alist[v2] = newNode2;
    }
    else
    {
        Node *temp = Alist[v2];
        while (temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = newNode2;
    }
}

void Graph::display()
{
    for (int i = 0; i < no_of_vertices; ++i)
    {
        Node *temp = Alist[i];
        cout << "Vertex " << i << ": ";
        while (temp != NULL)
        {
            cout << temp->vertex << " ";
            temp = temp->next;
        }
        cout << endl;
    }
}

void Graph::DFS()
{
    bool visited[no_of_vertices] = {false}; // Initialize all vertices as not visited
    stack<int> stk;
    int initialvertex = 0; // Start DFS from vertex 0
    visited[initialvertex] = true;
    stk.push(initialvertex);

    while (!stk.empty())
    {
        int curr = stk.top();
        stk.pop();
        cout << curr << " ";

        Node *temp = Alist[curr];
        while (temp != NULL)
        {
            if (!visited[temp->vertex])
            {
                visited[temp->vertex] = true;
                stk.push(temp->vertex);
            }
            temp = temp->next;
        }
    }
}

void Graph::BFS()
{
    bool visited[no_of_vertices] = {false}; // Initialize all vertices as not visited
    queue<int> q;
    int initialvertex = 0; // Start BFS from vertex 0
    visited[initialvertex] = true;
    q.push(initialvertex);

    while (!q.empty())
    {
        int curr = q.front();
        q.pop();
        cout << curr << " ";

        Node *temp = Alist[curr];
        while (temp != NULL)
        {
            if (!visited[temp->vertex])
            {
                visited[temp->vertex] = true;
                q.push(temp->vertex);
            }
            temp = temp->next;
        }
    }
}

int main()
{
    Graph G1;
    G1.insert(0, 1);
    G1.insert(0, 2);
    G1.insert(1, 3);
    G1.insert(2, 4);
    G1.insert(3, 4);
    G1.insert(3, 5);
    G1.insert(4, 5);
    G1.display();

    cout << "DFS traversal starting from vertex 0: ";
    G1.DFS(); // Corrected the function name
    cout << endl;

    cout << "BFS traversal starting from vertex 0: ";
    G1.BFS(); // BFS function now works correctly
    cout << endl;

    return 0;
}
