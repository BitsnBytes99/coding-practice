#include <iostream>
#include <algorithm>
using namespace std;

struct Edge {
    int u, v, weight; // u and v are the vertices, weight is the cost
};

// Function to compare edges based on weight (for sorting)
bool compare(Edge a, Edge b) {
    return a.weight < b.weight;
}

// Disjoint Set Union-Find (with path compression)
class DisjointSet {
    int *parent, *rank;

public:
    DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i; // Initially, each node is its own parent
            rank[i] = 0;   // Rank is initially 0
        }
    }

    int find(int node) {
        if (parent[node] != node) {
            parent[node] = find(parent[node]); // Path compression
        }
        return parent[node];
    }

    void unionSets(int u, int v) {
        int rootU = find(u);
        int rootV = find(v);

        if (rootU != rootV) {
            if (rank[rootU] < rank[rootV]) {
                parent[rootU] = rootV;
            } else if (rank[rootU] > rank[rootV]) {
                parent[rootV] = rootU;
            } else {
                parent[rootV] = rootU;
                rank[rootU]++;
            }
        }
    }

    ~DisjointSet() {
        delete[] parent;
        delete[] rank;
    }
};

// Kruskal's Algorithm
void kruskal(int n, Edge edges[], int e) {
    sort(edges, edges + e, compare); // Sort edges by weight

    DisjointSet ds(n);
    Edge mst[n - 1]; // To store edges of the MST
    int mstWeight = 0, mstCount = 0;

    for (int i = 0; i < e; i++) {
        if (ds.find(edges[i].u) != ds.find(edges[i].v)) {
            mst[mstCount++] = edges[i];      // Add edge to MST
            mstWeight += edges[i].weight;   // Add weight to total cost
            ds.unionSets(edges[i].u, edges[i].v); // Union the sets
        }
    }

    // Print the MST and its weight
    cout << "Edges in the Minimum Spanning Tree:" << endl;
    for (int i = 0; i < mstCount; i++) {
        cout << mst[i].u << " - " << mst[i].v << " (Weight: " << mst[i].weight << ")" << endl;
    }
    cout << "Total Weight of MST: " << mstWeight << endl;
}

int main() {
    int n = 6; // Number of vertices
    int e = 9; // Number of edges

    Edge edges[] = {
        {0, 1, 4}, {0, 2, 4}, {1, 2, 2}, {1, 3, 5}, {2, 3, 8},
        {3, 4, 6}, {4, 5, 9}, {3, 5, 7}, {2, 5, 10}
    };

    kruskal(n, edges, e);

    return 0;
}
