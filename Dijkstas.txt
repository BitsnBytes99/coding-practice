#include <iostream>
using namespace std;

#define inf INT16_MAX

// Function to print the path from the source to a given vertex
// void printPath(int parent[], int j) {
//     if (parent[j] == -1) {
//         return;
//     }
//     printPath(parent, parent[j]);
//     cout << j << " ";
// }

// Function to print the solution including distance and paths
void printSolution(int dist[], int parent[], int src, int size) {
    cout << "Vertex \t Distance from Source \t Path" << endl;
    for (int i = 0; i < size; i++) {
        cout << i << " \t\t " << dist[i] << " \t\t " << src << " ";
       // printPath(parent, i);
        cout << endl;
    }
}

// Function to find the vertex with the minimum distance value
int minDistance(int dist[], bool sptSet[], int size) {
    int min = inf, min_index;

    for (int v = 0; v < size; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v], min_index = v;
        }
    }
    return min_index;
}

// Implementation of Dijkstra's Algorithm
void dijkstra(int graph[5][5], int src, int size) {
    int dist[size];
    bool sptSet[size];
    int parent[size];

    for (int i = 0; i < size; i++) {
        dist[i] = inf;
        sptSet[i] = false;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 0; count < size - 1; count++) {
        int u = minDistance(dist, sptSet, size);
        sptSet[u] = true;

        for (int v = 0; v < size; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != inf && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printSolution(dist, parent, src, size);
}

int main() {
    // Representing landmarks as nodes: 
    // 0 - College, 1 - Library, 2 - Canteen, 3 - Hostel, 4 - Sports Ground
    int graph[5][5] = {
        {0, 10, 0, 30, 100},  // Distances from College to other landmarks
        {10, 0, 50, 0, 0},    // Distances from Library to other landmarks
        {0, 50, 0, 20, 10},   // Distances from Canteen to other landmarks
        {30, 0, 20, 0, 60},   // Distances from Hostel to other landmarks
        {100, 0, 10, 60, 0}   // Distances from Sports Ground to other landmarks
    };

    int source = 0; // College as the source
    int size = sizeof(graph) / sizeof(graph[0]);

    cout << "Finding shortest paths from College (Node 0):" << endl;
    dijkstra(graph, source, size);

    return 0;
}
